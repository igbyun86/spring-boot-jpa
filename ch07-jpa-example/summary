-상속관계매핑
 -조인전략: 각각의 테이블로 변환
 -단일 테이블 전략: 통합 테이블로 변환
 -테이블 전략: 서브타입 테이블로 변환

------------------------------------------------------------------------------------------------------------------------
-조인 전략
:자식 테이블이 부모 테이블의 기본키를 받아서 기본키 + 외래키로 사용하는 전략

@Inheritance(strategy = InheritanceType.JOINED)
:상속 매핑은 부모 클래스에 @Inheritance를 사용해야 한다.
그리고 매핑 전략을 지정해야 하는데 여기서는 조인전략을 사용하므로 InheritanceType.JOINED를 사용했다.

@DiscriminatorColumn(name = "DTYPE")
:부모 클래스에 구분 컬럼(자식테이블의 타입을 결졍하는 컬럼)을 지정한다. 이 컬럼으로 저장된 자식 테이블을 구분할 수 있다.
기본값이 DTYPE이므로 @DiscriminatorColumn으로 줄여 사용해도 된다.

@DiscriminatorValue("M")
:엔티티를 저장할 때 구분 컬럼(보통 공통코드에 등록된 구분값)에 입력할 값을 지정한다. ex) 영화:M, 책:B ...

@PrimaryKeyJoinColumn(name = "BOOK_ID")
:부모테이블의 ID컬럼명을 변경하고 싶은때 사용한다.

-장점
 - 테이블이 정규화된다
 - 외래키 참조 무결성 제약조건을 활용할 수 있다.
 - 저장공간을 효율적으로 사용한다.
-단점
 - 조회할 때 조인이 많이 사용되므로 성능이 저하될 수 있다.
 - 조회 쿼리가 복잡하다.
 - 데이터를 등록할 insert sql을 두 번 실행한다.
-특징
 - JPA 표준 명세는 구분 컬럼을 사용하도록 하지만 하이버네이트를 포함한 몇몇 구현체는 구분 컬럼(@DiscriminatorColumn) 없이도 동작한다.
 - 관련 어노테이션
   :@PrimaryKeyJoinColumn, @DiscriminatorColumn, @DiscriminatorValue

------------------------------------------------------------------------------------------------------------------------
-단일 테이블 전략
:테이블 하나만 사용한다. 구분 컬럼으로 어떤 자식 데이터가 저장되었는지 구분한다. 조인을 사용하지 않으므로 일반적으로 가장 빠르다.

-장점
 - 조인이 필요 없으므로 일반적으로 조회가 빠르다.
 - 조회 쿼리가 단순하다.
-단점
 - 자식 엔티티가 매핑한 컬럼은 모두 null을 허용해야 한다.
 - 단일 테이블에 모든 것을 저장하므로 테이블이 커질 수 있다. 그러므로 상황에 따라서는 조회 성능이 오히려 느려질 수 있다.
-특징
 - 구분 컬럼을 꼭 사용해야 한다. 따라서 @DiscriminatorColumn을 꼭 설정해야 한다.
 - @DiscriminatorValue를 지정하지 않으면 기본으로 엔티티 이름을 사용한다. 예) Movie, Album, Book

------------------------------------------------------------------------------------------------------------------------
-구현 클래스마다 테이블 전략
자식 엔티티마다 테이블을 만든다. 그리고 자식 테이블 각각에 필요한 컬럼이 모두 있다.

-장점
 - 서브 타입을 구분해서 처리할 때 효과적이다.
 - not null 제약조건을 사용할 수 있다.
-단점
 - 여러 자식 테이블을 함께 조회할 때 성능이 느리다(sql에 union을 사용해야 한다.)
 - 자식 테이블을 통합해서 쿼리하기 어렵다.
-특징
 - 구분 컬럼을 사용하지 않는다.

------------------------------------------------------------------------------------------------------------------------
-@MappedSuperclass
부모 클래스는 테이블과 매핑하지 않고 부모 클래스를 상속 받는 자식 클래스에게 매핑 정보만 제공하고 싶은 경우 사용한다.
엔티티가 아니므로 em.find() 나 JPQL에서 사용할 수 없다.
직접 생성해서 사용할 일은 거의 없으므로 추상 클래스로 만드는것을 권장한다.
등록일자, 수정일자, 등록자, 수정자 같은 여러 엔티티에서 공통으로 사용하는 속성을 효과적으로 관리할 수 있다.

@AttributeOverride(name = "id", column = @Column(name = "MEMBER_ID"))
: 부모에게 상속받은 id 속성을 재정의한다.

@AttributeOverrides({
    @AttributeOverride(name = "id", column = @Column(name = "MEMBER_ID")),
    @AttributeOverride(name = "name", column = @Column(name = "MEMBER_NAME"))
})
: 부모에게 상속받은 컬럼을 둘 이상 재정의 할 경우 사용

------------------------------------------------------------------------------------------------------------------------
@IdClass
-식별자 클래스의 속성명과 엔티티에서 사용하는 식별자의 속성명이 같아야 한다.
-Serializable 인터페이스를 구현해야 한다.
-equals, hashCode를 구현해야 한다.
-기본 생성자가 있어야 한다.
-식별자 클래스는 public이어야 한다.
-데이터베이스에 맞춘 방법

Parent parent = new Parent();
parent.setid1("myId1");
parent.setid2("myId2");
parent.setName("parentName");
em.persist(parent);

@EmbeddedId
좀 더 객체지향적인 방법이다.
-@Embeddable 어노테이션을 붙여주어야 한다.
-Serializable 인터페이스를 구현해야 한다.
-equals, hashCode를 구현해야 한다.
-기본 생성자가 있어야 한다.
-식별자 클래스는 public이어야 한다.

Parent parent = new Parent();
ParentId parentId = new ParentId("myId1", "myId2");
parent.setId(parentId);
parent.setName("parentName");
em.persist(parent);

※복합키에는 @GenerateValue를 사용할 수 없다. 복합 키를 구성하는 여러 컬럼 중 하나에도 사용할 수 없다.

@MapsId
:외래키와 매핑한 연관관계를 기본 키에도 매핑하는 기능이다.
속성값은 @EmbeddedId를 사용한 식별자 클래스의 기본 키 필드를 지정하면 된다.

