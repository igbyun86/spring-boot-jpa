-프록시
 -특징
  -프록시 객체는 처음 사용할 때 한번만 초기화된다.
  -프록시 객체를 초기화한다고 프록시 객체가 실제 엔티티로 바뀌는 것은 아니다.
   프록시 객체가 초기화되면 프록시 객체를 통해서 실제 엔티티에 접근할 수 있다.
  -프록시 객체는 원본 엔티티를 상속받은 객체이므로 타입 체크시에 주의해서 사용해야 한다.
  -영속성 컨텍스트에 찾는 엔티티가 이미 있으면 데이터 베이스를 조회할 필요가 없다.
  -초기화는 영속성 컨텍스트의 도움을 받아야 가능하다. 따라서 영속성 컨텍스트의 도움을 받을 수 없는
   준영속 상태의 프록시를 초기화하면 문제가 발생한다.
   ex) Member member = em.getReference(Member.class, "id1");
       transaction.commit();
       em.close();  //영속성 컨텍스트 종료

       member.getName();    // 준영속 상태 초기화 시도 에러 발생!

em.find(Member.class, "member1");
:영속성 컨텍스트에 엔티티가 없으면 데이터베이스를 조회

em.getReference(Member.class, "member1");
:프록시 객체를 반환(member.getName()처럼 실제 사용될때 영속성컨텍스트->데이터베이스 순으로 조회)

-지연로딩
:실제 사용될 때까지 데이터베이스 조회를 지연하는 방법
조회를 지연할 수 있는 가짜 객체가 필요(프록시객체)

-컬렉션 래퍼
:엔티티에 컬렉션이 있으면 컬렉션을 추적하고 관리할 목적으로 원본 컬렉션을 하이버네이트가 제공하는데
내장 컬렉션으로 변경하는데 이것을 컬렉션 래퍼라 한다.
컬렉션 객체가 프록시로 사용되는 경우 컬렉션 래퍼로 처리한다.

-즉시로딩
:엔티티를 조회할 때 연관된 엔티티도 함께 조회

-JPA 기본 페치 전략
@ManyToOne, @OneToOne   : 즉시로딩
@OneToMany, @ManyToMany : 지연로딩
=====추천하는 방법은 모든 연관관계에 지연 로딩을 사용하는 것이다.=====

-컬렉션에 FetchType.EAGER 사용시 주의점
 -컬렉션을 하나 이상 즉시 로딩하는 것은 권장하지 않는다
 -컬렉션 즉시 로딩은 항상 외부 조인(outer join)을 사용한다.

FetchType.EAGER 설정과 조인 전략
-@ManyToOne, @OneToOne
 -(optional = false)    : 내부 조인
 -(optional = true)     : 외부 조인

-@OneToMany, @ManyToMany
 -(optional = false)    : 외부 조인
 -(optional = true)     : 외부 조인

-영속성 전이:CASCADE
:특정 엔티티를 영속 상태로 만들 때 연관된 엔티티도 함께 영속 상태로 만들고 싶을때 사용
엔티티를 영속화할 때 연관된 엔티티도 같이 영속화하는 편리함을 제공

CASCADE 종류
ALL         //모두 적용
PERSIST     //영속
MERGE       //병합
REMOVE      //삭제
REFRESH     //REFRESH
DETACH      //DETACH

-고아객체
부모 엔티티와 연관관계가 끊어진 자식 엔티티