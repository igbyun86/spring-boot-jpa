영속성 컨텍스트
- 엔티티를 영구 저장하는 환경

엔티티의 생명주기
-비영속: 영속성 컨텍스트와 전혀 관계가 없는 상태
-영속: 영속성 컨텍스트에 저장된 상태
-준영속: 영속성 컨텍스트에 저장되었다가 분리된 상태
-삭제: 삭제된 상태(엔티티를 영속성 컨텍스트와 데이터베이스에서 삭제한다)

영속성 컨텍스트의 특징
-영속 상태는 식별자 값이 반드시 있어야 한다.
-트랜잭션을 커밋하는 순간 데이터베이스에 저장(flush)
-장점
*1차 캐시
*동일성 보장
*트랜잭션을 지원하는 쓰기 지연(등록 쿼리를 데이터베이스에 한번에 전달하기 때문에 성능을 최적화할 수 있다)
*변경 감지(영속성 컨텍스트가 관리하는 영속 상태의 엔티티에만 적용)
*지연 로딩

동일성과 동등성
-동일성: 실제 인스턴스가 같다. 따라서 참조값을 비교하는 == 비교의 값이 같다
-동등성: 실제 인스턴스는 다를 수 있지만 인스턴스가 가지고 있는 값이 같다. equals() 메소드를 구현

플러시(flush)
영속성 컨텍스트의 변경 내용을 데이터베이스에 반영한다.

준영속 상태의 특징
- 거의 비영속 상태에 가깝다
- 식별자 값을 가지고 있다
- 지연 로딩을 할 수 없다
* 영속 상태의 엔티티는 주로 영속성 컨텍스트가 종료되면서 준영속 상태가 된다.
개발자가 직접 준영속 상태로 만드는 일은 드물다.

병합(merge)
준영속 상태의 엔티티를 다시 영속 상태로 변경
비영속 엔티티도 영속 상태로 만들 수 있다.
Member member = new Member();
Member newMember = em.merge(member);    //비영속 병합
tx.commit();    // save or update